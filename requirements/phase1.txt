# BDX Exporter - Requirements Document

## Project Overview

Development of a BDX Exporter service written in Golang to expose monitoring metrics in Prometheus-compatible format. The exporter will collect data from HTTP endpoints and web scraping to provide temperature, humidity, CDU status, and liquid cooling metrics.

## Technical Stack

- **Language**: Golang
- **Web Framework**: Gin
- **Scraping Library**: chromedp
- **Export Format**: Prometheus metrics format
- **Package**: github.com/reski-rukmantiyo/bdx-parser-prometheus

## Functional Requirements

### 1. Temperature & Humidity Monitoring

The exporter shall collect temperature and humidity data from the 360View monitoring dashboard.

**Data Source**:
- URL: `https://app.managed360view.com/360view/trh_monitoring_dashboard.php`
- Method: `POST`
- Request Body: `action=inf`

**Raw Data Format**:

The API returns a JSON array of sensor objects:

```json
[
  {
    "x": 16.2,
    "y": 17.683068017366136,
    "label": "CGK3A-EMS-1.04-TH-DH-01",
    "temp": "23.63",
    "rh": "70.18",
    "temp_class": 0,
    "rh_class": 2,
    "temp_code": "#fffd00",
    "rh_code": "#fffd00"
  },
  ...
]
```

**Field Mapping**:

| Raw Field | Output Field | Description |
|-----------|--------------|-------------|
| `label` | `name` | Sensor identifier |
| `temp` | `temperature` | Temperature value in Celsius |
| `rh` | `humidity` | Relative humidity percentage |

**Fields to Extract**:
- `label` - Sensor name/identifier
- `temp` - Temperature reading
- `rh` - Relative humidity reading

**Fields to Ignore**:
- `x`, `y` - Coordinate positions (used for UI display)
- `temp_class`, `rh_class` - Classification codes
- `temp_code`, `rh_code` - Color codes for UI

### 2. CDU Status Monitoring

The exporter shall scrape CDU (Cooling Distribution Unit) status information from alarm and parameter tables.

**Data Source**:
- URL: `https://app.managed360view.com/360view/cdu_dashboard.php?cabinetid=38329`
- Method: `GET`

**Scraping Requirements**:
- Use chromedp for browser automation
- Extract data from:
  - Alarm table
  - Parameter table

### 3. Liquid Cooling Monitoring

The exporter shall scrape liquid cooling data from the overview dashboard, including CDU statuses and rack energy valve information.

**Data Source**:
- URL: `https://app.managed360view.com/360view/liquid_cooling_overview.php`
- Method: `GET`

**Scraping Requirements**:
- Use chromedp for browser automation
- Extract data from:
  - CDU status tables (flow rates, temperatures)
  - Rack energy valve status tables (power consumption, flow rates, temperatures)

## Authentication & Session Management

### Required Cookies

Both endpoints require the following cookies:

```
sess_map=rcbqfqyrbtqtweyxzrsasyxfcfcssacawexwqaesxxdefbxvzyaydxrwyqxvvzrufbtdeauexytusqzewzddadqaadcrrabcftrftttbdyttusascfqzqsfcrqevytucbctrdtaxqwqyfuqcavzvfwzrswyszwwytyfswvqwazaxdedq

PHPSESSID=ghv6gfuhing3knheq9hbnvaqh5
```

### Required Headers

- `Referer`: `https://app.managed360view.com/360view/trh_monitoring_dashboard.php`

## API Endpoints

### Temperature & Humidity Endpoint

```
POST https://app.managed360view.com/360view/trh_monitoring_dashboard.php

Headers:
  Referer: https://app.managed360view.com/360view/trh_monitoring_dashboard.php
  Cookie: sess_map=...; PHPSESSID=...

Body:
  action=inf
```

### CDU Status Endpoint

```
GET https://app.managed360view.com/360view/cdu_dashboard.php?cabinetid=38329

Headers:
  Cookie: sess_map=...; PHPSESSID=...
```

### Liquid Cooling Endpoint

```
GET https://app.managed360view.com/360view/liquid_cooling_overview.php

Headers:
  Cookie: sess_map=...; PHPSESSID=...
```

## Prometheus Metrics

The exporter shall expose the following metrics:

### Temperature & Humidity Metrics

**Metric: `bdx_temperature`**
- **Type**: Gauge
- **Description**: Current temperature reading in Celsius
- **Labels**: 
  - `name` - Sensor identifier (from `label` field)
- **Example**:
  ```
  bdx_temperature{name="CGK3A-EMS-1.04-TH-DH-01"} 23.63
  bdx_temperature{name="CGK3A-EMS-1.04-TH-DH-02"} 24.67
  bdx_temperature{name="CGK3A-EMS-1.04-TH-DH-03"} 23.19
  ```

**Metric: `bdx_humidity`**
- **Type**: Gauge
- **Description**: Current relative humidity percentage
- **Labels**: 
  - `name` - Sensor identifier (from `label` field)
- **Example**:
  ```
  bdx_humidity{name="CGK3A-EMS-1.04-TH-DH-01"} 70.18
  bdx_humidity{name="CGK3A-EMS-1.04-TH-DH-02"} 64.84
  bdx_humidity{name="CGK3A-EMS-1.04-TH-DH-03"} 72.3
  ```

### CDU Status Metrics

- `bdx_cdu_alarm_status` - CDU alarm status (scraped from Alarm table)
- `bdx_cdu_parameters` - CDU operational parameters (scraped from Parameter table)

### Liquid Cooling Metrics

**Metric: `bdx_liquid`**
- **Type**: Gauge
- **Description**: CDU liquid cooling metrics
- **Labels**:
  - `name` - CDU identifier (e.g., "CDU_1.1")
  - `type` - Metric type (e.g., "status", "fws_flow", "fws_temp_sup")
  - `metrix_type` - Unit (e.g., "percentage", "l/min", "C")
- **Example**:
  ```
  bdx_liquid{name="CDU_1.1", type="status", metrix_type="percentage"} 0.00
  bdx_liquid{name="CDU_1.1", type="fws_flow", metrix_type="l/min"} 566.00
  bdx_liquid{name="CDU_1.1", type="fws_temp_sup", metrix_type="C"} 27.10
  ```

**Metric: `bdx_liquid_rack`**
- **Type**: Gauge
- **Description**: Rack liquid cooling metrics
- **Labels**:
  - `name` - Rack number (e.g., "7", "8")
  - `type` - Metric type (e.g., "rack_liquid_cooling", "tcs_flow", "tcs_delta_temp")
  - `metrix_type` - Unit (e.g., "kW", "l/min", "C")
- **Example**:
  ```
  bdx_liquid_rack{name="7", type="rack_liquid_cooling", metrix_type="kW"} 55.10
  bdx_liquid_rack{name="7", type="tcs_flow", metrix_type="l/min"} 148.20
  bdx_liquid_rack{name="7", type="tcs_delta_temp", metrix_type="C"} 5.4
  ```

## Technical Implementation Details

### Web Server

- Implement using Gin web framework
- Default metrics endpoint: `/metrics`
- Health check endpoint: `/health`

### Data Collection

1. **HTTP Client**: For temperature and humidity data collection via POST request
2. **chromedp**: For CDU and liquid cooling dashboard scraping
   - Navigate to CDU dashboard page
   - Wait for table elements to load
   - Extract data from Alarm table
   - Extract data from Parameter table
   - Navigate to liquid cooling overview page
   - Extract data from CDU status tables
   - Extract data from rack energy valve tables

### Data Processing

#### Temperature & Humidity Processing

1. **Parse JSON Response**: Unmarshal the JSON array into Go structs
2. **Transform Data**: 
   - Extract `label` field → use as `name` label in metrics
   - Extract `temp` field → convert to float64 for temperature metric value
   - Extract `rh` field → convert to float64 for humidity metric value
3. **Create Prometheus Metrics**:
   - For each sensor object, create two metrics:
     - `bdx_temperature{name="<label_value>"} <temp_value>`
     - `bdx_humidity{name="<label_value>"} <rh_value>`

**Example Go Struct**:
```go
type SensorData struct {
    Label     string  `json:"label"`
    Temp      string  `json:"temp"`
    RH        string  `json:"rh"`
    // Other fields can be ignored
}
```

**Transformation Flow**:
```
Raw JSON → Parse → Extract (label, temp, rh) → Create Metrics with Labels
```

### Session Management

- Store session cookies securely
- Implement session refresh mechanism if needed
- Handle authentication failures gracefully

### Error Handling

- Implement retry logic for failed HTTP requests
- Log scraping errors
- Return appropriate error metrics to Prometheus

### Configuration

- Configurable scraping intervals
- Configurable timeout values
- Environment variables for sensitive data (cookies, session tokens)
- For all variables inside ./config/config.go to .env file

## Non-Functional Requirements

### Performance

- Scraping interval: Configurable (recommended: 30-60 seconds)
- Response time: < 5 seconds for /metrics endpoint

### Reliability

- Implement health checks
- Graceful degradation if one data source fails
- Logging for all operations

### Security

- Store credentials securely (environment variables or secrets management)
- Use HTTPS for all external communications
- Validate input parameters

## Deployment Considerations

- Dockerize the application
- Resource requirements: Minimal (chromedp requires headless browser)
- Port exposure: Default 8080 (configurable) and can be adjustable to .env file
- Health checkpoint by accessing /health url using GET

## Dependencies

```
- github.com/gin-gonic/gin
- github.com/chromedp/chromedp
- github.com/prometheus/client_golang
```

## Future Enhancements

- Support for multiple cabinet IDs
- Dashboard for visualization
- Alert rules configuration
- Historical data storage